/******************************************************************************
 *  Class:        ValidationResult.java
 *  Package:      paint.shared.validate
 *
 *  PURPOSE:
 *    Encapsulates the outcome of validation operations within the PAINT
 *    framework, collecting errors, warnings, and informational messages
 *    into a unified result object.
 *
 *  DESCRIPTION:
 *    • Stores categorized messages (errors, warnings, infos) generated by
 *      various validator classes.
 *    • Provides merging capability for combining results from multiple
 *      validation passes.
 *    • Maintains an optional string report for formatted summaries.
 *
 *  RESPONSIBILITIES:
 *    • Accumulate and manage structured validation results.
 *    • Provide read-only accessors for validation message lists.
 *    • Support merging, summarization, and reporting operations.
 *
 *  USAGE EXAMPLE:
 *    ValidationResult result = validator.validate(file);
 *    if (result.hasErrors()) {
 *        System.err.println(result.getReport());
 *    } else {
 *        System.out.println("✔ Validation passed");
 *    }
 *
 *  DEPENDENCIES:
 *    – java.util.{List, ArrayList, Collections}
 *
 *  AUTHOR:
 *    Hans Bakker
 *
 *  MODULE:
 *    paint-shared-utils
 *
 *  UPDATED:
 *    2025-10-28
 *
 *  COPYRIGHT:
 *    © 2025 Hans Bakker. All rights reserved.
 ******************************************************************************/

package paint.shared.validate;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Represents the aggregated result of one or more validation processes.
 * Stores categorized message lists (errors, warnings, and infos) and
 * provide convenience methods for merging and reporting.
 */
public final class ValidationResult {

    // ───────────────────────────────────────────────────────────────────────────────
    // FIELDS
    // ───────────────────────────────────────────────────────────────────────────────

    private final List<String> errors   = new ArrayList<>();
    private final List<String> warnings = new ArrayList<>();
    private final List<String> infos    = new ArrayList<>();
    private String report               = null;

    // ───────────────────────────────────────────────────────────────────────────────
    // MESSAGE ADDERS
    // ───────────────────────────────────────────────────────────────────────────────

    /**
     * Adds a new error message to the validation result.
     *
     * @param message descriptive text of the validation error
     */
    public void addError(String message) {
        errors.add(message);
    }

    /**
     * Adds a new warning message to the validation result.
     *
     * @param message descriptive text of the warning
     */
    public void addWarning(String message) {
        warnings.add(message);
    }

    /**
     * Adds an informational message to the validation result.
     *
     * @param message descriptive text of the information
     */
    public void addInfo(String message) {
        infos.add(message);
    }

    // ───────────────────────────────────────────────────────────────────────────────
    // ACCESSORS
    // ───────────────────────────────────────────────────────────────────────────────

    /**
     * Returns an immutable view of all recorded errors.
     *
     * @return unmodifiable list of error messages
     */
    public List<String> getErrors() {
        return Collections.unmodifiableList(errors);
    }

    /**
     * Returns an immutable view of all recorded warnings.
     *
     * @return unmodifiable list of warning messages
     */
    public List<String> getWarnings() {
        return Collections.unmodifiableList(warnings);
    }

    /**
     * Returns an immutable view of all informational messages.
     *
     * @return unmodifiable list of info messages
     */
    public List<String> getInfos() {
        return Collections.unmodifiableList(infos);
    }

    // ───────────────────────────────────────────────────────────────────────────────
    // STATE CHECKS
    // ───────────────────────────────────────────────────────────────────────────────

    /**
     * Checks if the validation result contains one or more errors.
     *
     * @return {@code true} if errors exist; {@code false} otherwise
     */
    public boolean hasErrors() {
        return !errors.isEmpty();
    }

    /**
     * Checks if the validation result contains one or more warnings.
     *
     * @return {@code true} if warnings exist; {@code false} otherwise
     */
    public boolean hasWarnings() {
        return !warnings.isEmpty();
    }

    /**
     * Determines whether the validation result is completely valid.
     *
     * @return {@code true} if no errors exist; {@code false} otherwise
     */
    public boolean isValid() {
        return errors.isEmpty();
    }

    // ───────────────────────────────────────────────────────────────────────────────
    // MERGE & REPORTING
    // ───────────────────────────────────────────────────────────────────────────────

    /**
     * Merges another {@link ValidationResult} into this one, combining
     * errors, warnings, infos, and any existing report text.
     *
     * @param other the other result to merge (may be {@code null})
     */
    public void merge(ValidationResult other) {
        if (other == null) {
            return;
        }
        this.errors.addAll(other.getErrors());
        this.warnings.addAll(other.getWarnings());
        this.infos.addAll(other.getInfos());

        if (other.report != null) {
            if (this.report == null) {
                this.report = other.report;
            } else {
                this.report += "\n" + other.report;
            }
        }
    }

    /**
     * Sets the report string for this validation result.
     *
     * @param report the textual report summary
     */
    public void setReport(String report) {
        this.report = report;
    }

    /**
     * Returns the current report string, if set.
     *
     * @return report text or {@code null} if not defined
     */
    public String getReport() {
        return report;
    }

    // ───────────────────────────────────────────────────────────────────────────────
    // OUTPUT
    // ───────────────────────────────────────────────────────────────────────────────

    /**
     * Returns a textual summary of this validation result.
     * Prefers the {@link #report} field if set; otherwise, prints
     * all error messages or a success message if valid.
     *
     * @return formatted summary string
     */
    @Override
    public String toString() {
        if (report != null) {
            return report;
        }
        if (isValid()) {
            return "✔ No issues found";
        }
        return String.join("\n", errors);
    }
}